name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  id-token: write  # For trusted publishing to PyPI

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-prerelease: ${{ steps.check-prerelease.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get-version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Check if prerelease
        id: check-prerelease
        run: |
          VERSION="${{ steps.get-version.outputs.version }}"
          if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
            echo "is-prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "is-prerelease=false" >> $GITHUB_OUTPUT
          fi

  test:
    name: Run Tests Before Release
    uses: ./.github/workflows/ci.yml

  build-and-publish:
    name: Build and Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-tag, test]
    environment:
      name: pypi
      url: https://pypi.org/p/pdf-vector-system
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install UV
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Install build dependencies
        run: |
          uv tool install build
          uv tool install twine

      - name: Build package
        run: |
          uvx build

      - name: Check package
        run: |
          uvx twine check dist/*

      - name: Publish to Test PyPI
        if: needs.validate-tag.outputs.is-prerelease == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          skip-existing: true

      - name: Publish to PyPI
        if: needs.validate-tag.outputs.is-prerelease == 'false'
        uses: pypa/gh-action-pypi-publish@release/v1

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-and-publish]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Generate release notes
        id: release-notes
        run: |
          VERSION="${{ needs.validate-tag.outputs.version }}"

          # Extract changelog section for this version
          if [ -f CHANGELOG.md ]; then
            # Get content between version headers
            sed -n "/## \[${VERSION#v}\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md

            # If no specific version found, use unreleased section
            if [ ! -s release_notes.md ]; then
              sed -n "/## \[Unreleased\]/,/## \[/p" CHANGELOG.md | sed '$d' > release_notes.md
            fi
          else
            echo "Release $VERSION" > release_notes.md
            echo "" >> release_notes.md
            echo "See the full changelog at: https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md" >> release_notes.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-tag.outputs.version }}
          name: Release ${{ needs.validate-tag.outputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ needs.validate-tag.outputs.is-prerelease == 'true' }}
          files: |
            dist/*.tar.gz
            dist/*.whl
          generate_release_notes: true

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-tag, create-github-release]
    if: needs.validate-tag.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update version in develop branch
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Switch to develop branch
          git checkout develop || git checkout -b develop

          # Update version for next development cycle
          VERSION="${{ needs.validate-tag.outputs.version }}"
          NEXT_VERSION=$(echo $VERSION | sed 's/v//' | awk -F. '{$NF = $NF + 1; print}' | sed 's/ /./g')

          # Update CHANGELOG.md with new unreleased section
          sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n### Added\n\n### Changed\n\n### Fixed\n\n## [${VERSION#v}] - $(date +%Y-%m-%d)/" CHANGELOG.md

          git add CHANGELOG.md
          git commit -m "chore: prepare for next development cycle after ${VERSION}" || true
          git push origin develop || true
